metadata:
  creationTimestamp: null
  name: mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      kube-min-cli: 3pecgqzo9mzd6ml9anrilfvz-mysql
      kube-min-cli-appId: 3pecgqzo9mzd6ml9anrilfvz
  serviceName: ""
  template:
    metadata:
      creationTimestamp: null
      labels:
        kube-min-cli: 3pecgqzo9mzd6ml9anrilfvz-mysql
        kube-min-cli-appId: 3pecgqzo9mzd6ml9anrilfvz
    spec:
      containers:
      - env:
        - name: MYSQL_DATABASE
          value: game
        - name: TZ
          value: Asia/Bangkok
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MYSQL_ROOT_PASSWORD
              name: m2507151323j3fnrk-mysql
        image: docker.yu3.co/3os/mysql:5.7.44-mha-tz
        imagePullPolicy: Always
        name: mysql
        ports:
        - containerPort: 3306
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data
          subPath: mysql
        - mountPath: /etc/mysql/conf.d
          name: conf
        - mountPath: /docker-entrypoint-initdb.d
          name: init-scripts
      - command:
        - bash
        - -c
        - "set -ex\n\n[[ $HOSTNAME =~ ^(.*?)-([0-9]+)$ ]] || exit 1\n\nprefix_name=${BASH_REMATCH[1]}\n\ncd
          /var/lib/mysql\n\nif [[ -f xtrabackup_slave_info ]]; then\n    mv xtrabackup_slave_info
          change_gtid.sql.in\n    rm -f xtrabackup_binlog_info\nelif [[ -f xtrabackup_binlog_info
          ]]; then\n    [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)[[:space:]]+(.*)$
          ]] || exit 1\n    rm -f xtrabackup_binlog_info\n    echo \"SET GLOBAL gtid_purged='${BASH_REMATCH[3]}';\"
          > change_gtid.sql.in\nfi\n\nif [[ -f change_gtid.sql.in ]]; then \n\n    echo
          \"Waiting for mysqld to be ready (accepting connections)\"\n\n    until
          mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} -e \"SELECT 1\"; do sleep
          1; done\n\n    echo \"Initializing replication with GTID\"\n\n    mv change_gtid.sql.in
          change_gtid.sql.orig\n\n    set_gtid_purged=$(grep \"gtid_purged=\" change_gtid.sql.orig)\n\n
          \   mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} <<EOF\n\n    STOP
          SLAVE;\n\n    RESET SLAVE ALL;\n\n    RESET MASTER;\n\n    ${set_gtid_purged};\n\n
          \   CHANGE MASTER TO\n      MASTER_HOST='${prefix_name}-0.${prefix_name}',\n
          \     MASTER_PORT=3306,\n      MASTER_USER='root',\n      MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}',\n
          \     MASTER_AUTO_POSITION=1;\n    START SLAVE;\n\nEOF\n\nfi\n\nexec ncat
          --listen --keep-open --send-only --max-conns=1 3307 -c \"xtrabackup --backup
          --slave-info --galera-info --safe-slave-backup --stream=xbstream --host=127.0.0.1
          --user=root --password=${MYSQL_ROOT_PASSWORD}\""
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: MYSQL_ROOT_PASSWORD
              name: m2507151323j3fnrk-mysql
        image: docker.yu3.co/3os/xtrabackup:latest
        name: xtrabackup
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: data
          subPath: mysql
        - mountPath: /etc/mysql/conf.d
          name: conf
      initContainers:
      - command:
        - bash
        - -c
        - "set -ex\n[[ $HOSTNAME =~ ^(.*?)-([0-9]+)$ ]] || exit 1\nprefix_name=${BASH_REMATCH[1]}\nordinal=${BASH_REMATCH[2]}\necho
          [mysqld] > /mnt/conf.d/server-id.cnf\necho server-id=$((100 + $ordinal))
          >> /mnt/conf.d/server-id.cnf\nif [[ ${ordinal} -eq 0 ]]; then\n  cp /mnt/config-map/master.cnf
          /mnt/conf.d\n  kubectl label pod $HOSTNAME mysql-pod-role=$MASTER_ROLE_NAME
          --namespace $POD_NAMESPACE --overwrite\nelse\n  cp /mnt/config-map/slave.cnf
          /mnt/conf.d\n  kubectl label pod $HOSTNAME mysql-pod-role=$SLAVE_ROLE_NAME
          --namespace $POD_NAMESPACE --overwrite\nfi\n\n[[ -d /var/lib/mysql/mysql
          ]] && exit 0\noutput_dir=/docker-entrypoint-initdb.d\necho \"use $MYSQL_DATABASE\"
          > $output_dir/00-init.sql\nfor i in $(seq 1 5); do\n\techo \"尝试下载初始化脚本...第
          $i 次\"\n\tcurl -f --connect-timeout 10 --max-time 60 -o \"$output_dir/01-init.sql\"
          --retry 3 --retry-delay 5 \"$SQL_URL\" && break || sleep 5\ndone\n[ -f \"$output_dir/01-init.sql\"
          ] || { echo \"下载失败\"; exit 1; }"
        env:
        - name: MASTER_ROLE_NAME
          value: m2507151323j3fnrk-mysql-master
        - name: MYSQL_DATABASE
          value: game
        - name: SLAVE_ROLE_NAME
          value: m2507151323j3fnrk-mysql-slave
        - name: SQL_URL
          value: https://paas-3os.oss-cn-shanghai.aliyuncs.com/uploads/2025/06/27/2506271630choUDT.sql
        image: docker.yu3.co/3os/kubectl:1.28.5
        name: init-mysql
        resources: {}
        volumeMounts:
        - mountPath: /mnt/conf.d
          name: conf
        - mountPath: /docker-entrypoint-initdb.d
          name: init-scripts
        - mountPath: /mnt/config-map
          name: config-map
      - command:
        - bash
        - -c
        - |
          set -ex

          [[ -d /var/lib/mysql/mysql ]] && exit 0

          [[ $HOSTNAME =~ ^(.*?)-([0-9]+)$ ]] || exit 1

          prefix_name=${BASH_REMATCH[1]}

          ordinal=${BASH_REMATCH[2]}

          [[ $ordinal == 0 ]] && exit 0

          ncat --recv-only ${prefix_name}-$(($ordinal-1)).${prefix_name} 3307 | xbstream -x -C /var/lib/mysql

          xtrabackup --prepare --target-dir=/var/lib/mysql
        image: docker.yu3.co/3os/xtrabackup:latest
        name: clone-mysql
        resources: {}
        volumeMounts:
        - mountPath: /mnt/conf.d
          name: conf
        - mountPath: /var/lib/mysql
          name: data
          subPath: mysql
      terminationGracePeriodSeconds: 30
      volumes:
      - emptyDir: {}
        name: conf
      - emptyDir: {}
        name: init-scripts
      - configMap:
          defaultMode: 420
          name: m2507151323j3fnrk-mysql
        name: config-map
      - name: data
        persistentVolumeClaim:
          claimName: data
  updateStrategy: {}
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      name: data
      namespace: default
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
    status: {}
status:
  availableReplicas: 0
  replicas: 0

